/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF_L 0
#define SYM_L 1
#define NUM_L 2

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        ht: hold_tap_mods_standard {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_TAP_PREF";
            #binding-cells = <2>;
            tapping-term-ms = <160>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        tdz: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <215>;
            bindings = <&kp Z>, <&kp GRAVE>;
        };

        tdj: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_1";
            #binding-cells = <0>;
            tapping-term-ms = <175>;
            bindings = <&kp J>, <&kp ESC>;
        };

    };

    keymap {
        compatible = "zmk,keymap";


/*
 *   ' , . p y   f g c r l   |
 *   a o e u i   d h t n s   |
 *   ; q j k x   b m w v z   |
 *
 *   й ц у к е   н г ш щ з   |
 *   ф ы в а п   р о л д ж   |
 *   я ч с м и   т ь б ю .   |
 */

        default_layer {
            bindings = <
                &kp Q         &kp W      &kp E       &kp R   &kp T         &kp Y            &kp U          &kp I       &kp O      &kp P
                &hm LCTRL A   &hm LALT S &hm LGUI D  &kp F   &kp G         &kp H            &tdj           &hm RGUI K  &hm RALT L &hm RCTRL SEMI
                &tdz          &kp X      &kp C       &kp V   &kp B         &kp N            &kp M          &kp COMMA   &kp DOT    &kp FSLH
                                &lt NUM_L TAB  &ht LSHFT SPACE           &ht RSHFT ENTER  &lt SYM_L BKSP
                >;
        };

/*
 *   [ ] { } +   * & a | ^   |
 *   < > ( ) =   - a a a _   |
 *   ~ ! @ # \   / $ % ? .   |
 *
 *   [ ] { } +   * ? а / :   |
 *   Ц У ( ) ъ   э а а а Э   |
 *   Ë ! " № \   х ; % Х .   |
 */

        sym_layer {
            bindings = <
                &kp MINUS        &kp EQUAL       &kp LS(MINUS)    &kp LS(PLUS) &kp RBRC      &kp STAR  &kp LS(N7)  &kp UARW    &kp LS(BSLH)  &kp LS(N6)
                &hm LCTRL LS(W)  &hm LALT LS(E)  &hm LGUI LS(N9)  &kp LS(N0)   &kp RBKT      &kp QUOT  &kp LARW    &kp DARW    &kp RARW      &kp LS(QUOT)
                &kp TILDE        &kp LS(N1)      &kp LS(N2)       &kp LS(N3)   &kp BSLH      &kp LBKT  &kp LS(N4)  &kp LS(N5)  &kp LBRC      &trans
                                                                        &trans &trans        &bootloader &trans
            >;
        };

/*
 *     ALT +
 *   b 7 8 9 +   * 7 8 9 %   |
 *   b 4 5 6 =   - 4 5 6 0   |
 *   b 1 2 3 \   / 1 2 3 .   |
 */

        num_layer {
            bindings = <
                &bt BT_SEL 0  &kp LA(N7)  &kp LA(N8)  &kp LA(N9)   &kp KP_PLUS           &kp KP_MULTIPLY  &kp N7  &kp N8  &kp N9  &kp LS(N5)
                &bt BT_SEL 1  &kp LA(N4)  &kp LA(N5)  &kp LA(N6)   &kp KP_EQUAL          &kp KP_MINUS     &kp N4  &kp N5  &kp N6  &kp N0
                &bt BT_CLR    &kp LA(N1)  &kp LA(N2)  &kp LA(N3)   &kp BSLH              &kp KP_SLASH     &kp N1  &kp N2  &kp N3  &kp KP_DOT
                                                            &trans &bootloader           &trans &trans
            >;
        };

    };
};
