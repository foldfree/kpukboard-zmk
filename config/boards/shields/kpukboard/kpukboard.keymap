/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF_L 0
#define SYM_L 1
#define NUM_L 2
#define FUN_L 3

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
// &lt { quick_tap_ms = <-1>; };

/ {
    behaviors {
        ht: hold_tap_mods_standard {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_TAP_PREF";
            #binding-cells = <2>;
            tapping-term-ms = <160>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        tdz: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <215>;
            bindings = <&kp Z>, <&kp GRAVE>;
        };

        tdj: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_1";
            #binding-cells = <0>;
            tapping-term-ms = <175>;
            bindings = <&kp J>, <&kp ESC>;
        };

    };

    keymap {
        compatible = "zmk,keymap";


/*
 *   dvorak
 *
 *   ' , . p y   f g c r l   |
 *   a o e u i   d h t n s   |
 *   ; q j k x   b m w v z   |
 *
 *   йцукен
 *
 *   й ц у к е   н г ш щ з   |
 *   ф ы в а п   р о л д ж   |
 *   я ч с м и   т ь б ю .   |
 */

        default_layer {
            bindings = <
                &kp Q   &kp W        &kp E       &kp R       &kp T         &kp Y            &kp U          &kp I            &kp O           &kp P
                &kp A   &kp S        &kp D       &kp F       &kp G         &kp H            &tdj           &kp K            &kp L           &kp SEMI
                &tdz    &ht LCTRL X  &ht LGUI C  &ht LALT V  &kp B         &kp N            &ht LALT M     &ht RGUI COMMA   &ht RCTRL DOT   &kp FSLH
                                &lt NUM_L TAB  &ht LSHFT SPACE           &ht RSHFT ENTER  &lt SYM_L BKSP
                >;
        };

/*
 *   dvorak
 *
 *   [ ] { } +   * & a | ^   |
 *   < > ( ) _   - a a a $   |
 *   ~ ! @ \ #   = / % ? 3   |
 *
 *   йцукен
 *
 *   [ ] { } +   * ? а / :   |
 *   Ц У ( ) ъ   э а а а Э   |
 *   Ë ! " № \   х ; % Х 3   |
 */

        sym_layer {
            bindings = <
                &kp MINUS        &kp EQUAL         &kp LS(MINUS)    &kp LS(PLUS)     &kp RBRC      &kp STAR  &kp LS(N7)       &kp UARW         &kp LS(BSLH)     &kp LS(N6)
                &kp LS(W)        &kp LS(E)         &kp LS(N9)       &kp LS(N0)       &kp LS(QUOT)  &kp QUOT  &kp LARW         &kp DARW         &kp RARW         &kp LS(N4)
                &kp TILDE        &ht LCTRL LS(N1)  &ht LGUI LS(N2)  &ht LALT BSLH    &kp LS(N3)    &kp RBKT  &ht LALT LBKT    &ht RGUI LS(N5)  &ht RCTRL LBRC   &tog FUN_L
                                                                        &trans &trans              &bootloader &trans
            >;
        };

/*
 *     ALT +
 *   v 7 8 9 +   * 7 8 9 %   |
 *   v 4 5 6 =   - 4 5 6 0   |
 *   v 1 2 3 \   / 1 2 3 .   |
 */

        num_layer {
            bindings = <
                &kp C_VOL_UP  &kp LA(N7)  &kp LA(N8)  &kp LA(N9)   &kp KP_PLUS           &kp KP_MULTIPLY  &kp N7       &kp N8       &kp N9        &kp LS(N5)
                &kp C_VOL_DN  &kp LA(N4)  &kp LA(N5)  &kp LA(N6)   &kp KP_EQUAL          &kp KP_MINUS     &kp N4       &kp N5       &kp N6        &kp N0
                &kp C_MUTE    &kp LA(N1)  &kp LA(N2)  &kp LA(N3)   &kp BSLH              &kp KP_SLASH     &ht LALT N1  &ht RGUI N2  &ht RCTRL N3  &kp KP_DOT
                                                            &trans &bootloader           &trans &trans
            >;
        };

/*     F F F F
 *   b 7 8 9 2   v u a d x   |
 *   b 4 5 6 1   v a a a x   |
 *   b 1 2 3 0   m p p n 3   |
 */

        fn_layer {
            bindings = <
                &bt BT_SEL 0  &kp F7  &kp F8  &kp F9   &kp F12          &kp C_VOL_UP    &kp PG_UP   &kp UARW  &kp PG_DN   &trans
                &bt BT_SEL 1  &kp F4  &kp F5  &kp F6   &kp F11          &kp C_VOL_DN    &kp LARW    &kp DARW  &kp RARW    &trans
                &bt BT_CLR    &kp F1  &kp F2  &kp F3   &kp F10          &kp C_MUTE      &kp C_PREV  &kp C_PP  &kp C_NEXT  &tog FUN_L
                                        &trans &trans                      &trans &trans
            >;
        };

    };
};
